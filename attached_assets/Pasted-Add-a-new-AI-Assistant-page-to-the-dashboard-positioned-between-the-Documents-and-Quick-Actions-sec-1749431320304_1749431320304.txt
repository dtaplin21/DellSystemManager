Add a new AI Assistant page to the dashboard, positioned between the Documents and Quick Actions sections. This page should:

1. Route & Layout
Route: /dashboard/ai

Nav & Cards:

In src/app/dashboard/layout.tsx, insert an <a href="/dashboard/ai">AI Assistant</a> link in the top nav.

In the dashboard’s cards grid (e.g. under src/components/dashboard/CardGrid.tsx or wherever cards are rendered), add a new <AIPage /> card under Documents and above Quick Actions.

2. AIPage Component (src/components/ai/AIPage.tsx)
Document Uploader & List
Allow users to upload multiple documents (PDF, DOCX).

Display each document’s filename and upload date, with a “Read with AI” button next to it.

Chat Interface
A scrollable, never-unmounting chat window.

Input at the bottom; on submit, POST { projectId, question, documents } to /api/ai/query.

Render AI responses inline as chat bubbles.

Source Links & Inline Excerpts
For each AI answer, show a list of references: which document and page(s) contain the answer.

Inline-render the exact 2–3 sentence excerpt under each reference, all visible in the same scrollable view.

3. Auto-Layout Section
Button: “Generate Layout from Docs” (disabled until a specific project is selected).

On click, POST { projectId, documents } to /api/ai/automate-layout.

Receive { projectId, width, height, scale, panels } for that project only.

Update the panels state for that project (do not affect others).

Automatically navigate or reveal the /dashboard/projects/[id]/panel-layout view with the newly generated layout.

4. Project Context & Enablement
The AI page must know which project is active—require that the user has clicked into /dashboard/projects/[id] before the Generate Layout button becomes enabled.

All AI actions (query & automate) must include projectId so layouts only apply to the intended project.

5. Backend Endpoints
POST /api/ai/query

Body: { projectId, question: string, documents: Array<{ id, text }> }

Returns: { answer: string, references: [{ docId, page, excerpt }] }

POST /api/ai/automate-layout

Body: { projectId, documents: Array<{ id, text }> }

Returns: { projectId, width, height, scale, panels: [...] }

GET /api/ai/job-status/:projectId

Returns progress, status, and prevents duplicate jobs.

6. Conflict Prevention & Validation
Locking: When the AI is computing, lock the layout UI (disable manual edits) and show a spinner or “AI is generating…” overlay.

Profiles & Presets: Allow selecting AI “mode” (e.g. “Maximize coverage” vs. “Conform to existing boundaries”).

Server-Side Validation: On AI submissions, re-run existing panel-validation logic server-side; reject invalid layouts.

Versioning: Use a version or etag on each layout for optimistic concurrency—return 409 on conflict, and show a “Merge changes?” UI.

7. Approval Workflow & Real-Time Updates
Present the AI’s proposed layout in a “Pending Review” state; only apply live once the user clicks Approve.

Tag every change with metadata—{ author: 'AI' } vs. { author: 'User' }.

Use WebSockets to push layout changes (AI or user) to connected clients, with a banner like “Layout updated by AI…” when stale.

8. Detailed Panel Metadata
Each panel object should include geometry and any “patch” annotations and “welder” seam details.

The AI must read, interpret, and incorporate these fields during generation and updates.

9. Global Integration & State
Reuse existing React contexts/hooks for projects, documents, panel layouts, and QC data so AI actions update the same global state.

Ensure the new AI page link, card entry, and disabled/enabled button states are fully wired up in your route files and components under /src/app and /src/components.

