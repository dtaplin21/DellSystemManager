Here’s a self–contained zoom feature you can drop into your panel‐layout page. All of this goes into your front-end files:

A) HTML
Right next to your <div id="panel-viewer">…</div>, add:

html
Copy
Edit
<!-- Zoom controls -->
<div id="zoom-controls" class="zoom-controls">
  <button id="zoom-out">–</button>
  <span id="zoom-level">100%</span>
  <button id="zoom-in">+</button>
</div>

<!-- Your existing panel container -->
<div id="panel-viewer"> … </div>
B) CSS
In your stylesheet (e.g. styles.css), add:

css
Copy
Edit
/* Zoom control styling */
.zoom-controls {
  position: absolute;
  top: 10px;
  left: 10px;
  z-index: 100;
  display: flex;
  align-items: center;
  gap: 4px;
}

.zoom-controls button {
  width: 32px;
  height: 32px;
  font-size: 1.2rem;
  cursor: pointer;
}

.zoom-controls span {
  min-width: 40px;
  text-align: center;
  font-size: 1rem;
}

/* Ensure the viewer scales around top-left */
#panel-viewer {
  transform-origin: 0 0;
  /* if you need scrollbars: */
  overflow: auto;
  /* set a fixed size if desired: */
  /* width: 100%; height: 100%; */
}
C) JavaScript
In the same file where you define createVisualPanel, makePanelDraggable, etc., add at the top:

js
Copy
Edit
// --- Zoom setup ---
let zoomLevel = 1;
const ZOOM_STEP = 0.1;
const MIN_ZOOM  = 0.2;
const MAX_ZOOM  = 3;
const panelViewer = document.getElementById('panel-viewer');
const zoomInBtn   = document.getElementById('zoom-in');
const zoomOutBtn  = document.getElementById('zoom-out');
const zoomLabel   = document.getElementById('zoom-level');

function updateZoom() {
  panelViewer.style.transform = `scale(${zoomLevel})`;
  zoomLabel.textContent = `${Math.round(zoomLevel * 100)}%`;
}

// Wire the buttons
zoomInBtn.addEventListener('click', () => {
  zoomLevel = Math.min(MAX_ZOOM, zoomLevel + ZOOM_STEP);
  updateZoom();
});
zoomOutBtn.addEventListener('click', () => {
  zoomLevel = Math.max(MIN_ZOOM, zoomLevel - ZOOM_STEP);
  updateZoom();
});

// initialize
updateZoom();
Then, to make your existing drag and resize logic respect the zoom, wherever you do:

js
Copy
Edit
// e.clientX, e.clientY → local grid coords
const viewerRect = panelViewer.getBoundingClientRect();
const localX = (e.clientX - viewerRect.left) / zoomLevel;
const localY = (e.clientY - viewerRect.top)  / zoomLevel;
Replace every raw use of e.clientX/e.clientY in your:

makePanelDraggable mousedown/mousemove handlers

addResizeHandles mousedown/mousemove handlers

with the above localX/localY. Then use localX, localY for computing new panelData.x, panelData.y or new widths/heights.

Example patch for your drag logic:
diff
Copy
Edit
- const rect = panelEl.getBoundingClientRect();
- offsetX = e.clientX - rect.left - panelData.x;
- offsetY = e.clientY - rect.top  - panelData.y;
+ const viewerRect = panelViewer.getBoundingClientRect();
+ const localX = (e.clientX - viewerRect.left) / zoomLevel;
+ const localY = (e.clientY - viewerRect.top)  / zoomLevel;
+ offsetX = localX - panelData.x;
+ offsetY = localY - panelData.y;
And in mousemove:

diff
Copy
Edit
- let newX = e.clientX - startX - offsetX;
- let newY = e.clientY - startY - offsetY;
+ const localX = (e.clientX - viewerRect.left) / zoomLevel;
+ const localY = (e.clientY - viewerRect.top)  / zoomLevel;
+ let newX = localX - offsetX;
+ let newY = localY - offsetY;
With those changes in place:

Clicking + / − will zoom the entire grid in/out.

As you drag or resize, the calculations map your mouse position back into “unzoomed” coordinates, so panels move and scale correctly under any zoom level.

That will let you zoom out to see an entire 5-acre layout or zoom in tight on one corner—while still perfectly preserving your drag, resize, snap, and rotate behaviors.







