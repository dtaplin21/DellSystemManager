Here’s a small utility you can drop into your script—and a tweak to your existing createVisualPanel—so that any time you change your panel data (on creation or after editing) the live panel on the canvas will always reflect the latest values:

js
Copy
Edit
// 1) A helper to update an existing panel’s DOM to match its data model
function updatePanelVisual(panel) {
  const panelEl = document.querySelector(`[data-panel-id="${panel.id}"]`);
  if (!panelEl) return;

  // Update the label text
  const rollText  = panelEl.querySelector('.roll-text');
  const panelText = panelEl.querySelector('.panel-text');
  if (rollText)  rollText.textContent  = panel.rollNumber;
  if (panelText) panelText.textContent = panel.panelNumber;

  // Recompute size/position
  const pw = panel.width  * PIXELS_PER_FOOT;
  const ph = panel.height * PIXELS_PER_FOOT;
  panelEl.style.width  = pw + 'px';
  panelEl.style.height = ph + 'px';
  panelEl.style.left   = panel.x  + 'px';
  panelEl.style.top    = panel.y  + 'px';

  // Reapply rotation if present
  panelEl.style.transform = panel.rotation
    ? `rotate(${panel.rotation}deg)`
    : 'none';
}
Then tweak your createVisualPanel so it’s idempotent (removes any old element first) and always calls updatePanelVisual at the end:

diff
Copy
Edit
function createVisualPanel(panel) {
- // Create the main panel element
- const panelEl = document.createElement('div');
+ // If it already exists (e.g. after an update), remove it
+ const old = document.querySelector(`[data-panel-id="${panel.id}"]`);
+ if (old) old.remove();
+ 
+ // Create the main panel element
+ const panelEl = document.createElement('div');

  panelEl.className         = `panel-item ${panel.shape}`;
  panelEl.id                = panel.id;
  panelEl.dataset.panelId   = panel.id;
  panelEl.dataset.shape     = panel.shape;

  // Create panel label with roll/panel numbers
  panelEl.innerHTML = `
    <div class="panel-label">
      <div class="roll-text">${panel.rollNumber}</div>
      <div class="panel-text">${panel.panelNumber}</div>
    </div>
  `;

  // Set sizing and position
  const pw = panel.width  * PIXELS_PER_FOOT;
  const ph = panel.height * PIXELS_PER_FOOT;
  panelEl.style.left             = panel.x + 'px';
  panelEl.style.top              = panel.y + 'px';
  panelEl.style.width            = pw + 'px';
  panelEl.style.height           = ph + 'px';
  panelEl.style.transformOrigin  = 'center center';
  if (panel.rotation) 
    panelEl.style.transform = `rotate(${panel.rotation}deg)`;

  // Interactive features
  addResizeHandles(panelEl, panel);
  const rotateHandle = document.createElement('div');
  rotateHandle.className = 'rotate-handle';
  panelEl.appendChild(rotateHandle);
  addRotateLogic(rotateHandle, panelEl, panel);
  makePanelDraggable(panelEl, panel);

  // Selection logic
  panelEl.addEventListener('click', function(e) {
    if (!e.target.classList.contains('rotate-handle') &&
        !e.target.classList.contains('resize-handle')) {
      e.stopPropagation();
      selectPanel(panel.id);
      document.getElementById('edit-panel-btn').disabled = false;
    }
  });

  panelViewer.appendChild(panelEl);

+ // finally, ensure the DOM matches the data model exactly
+ updatePanelVisual(panel);
}
And in your Save handler for the edit‐modal, just call updatePanelVisual(panelObj) right after you update panelObj:

diff
Copy
Edit
saveBtn.addEventListener('click', function() {
  // … your existing code to set panelObj.rollNumber, .panelNumber, etc.

  // 4) Update the live panel on the canvas:
- const rollText = panelEl.querySelector('.roll-text');
- const panelText = panelEl.querySelector('.panel-text');
- if (rollText)  rollText.textContent  = newRoll;
- if (panelText) panelText.textContent = newNumber;
+ updatePanelVisual(panelObj);

  // 5) Update sidebar list…
  updatePanelList();

  // … rest of your save logic
});
With that in place, any time you call createVisualPanel(panel) (on initial creation) or updatePanelVisual(panel) (after modal “Save”), the live panel’s label, size, position and rotation will always match the underlying panels[] data.