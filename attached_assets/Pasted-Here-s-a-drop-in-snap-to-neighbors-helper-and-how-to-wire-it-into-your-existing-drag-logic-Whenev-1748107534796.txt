Here’s a drop-in “snap-to-neighbors” helper and how to wire it into your existing drag logic. Whenever you compute a new (x,y) during mousemove, call this to nudge the panel so its edges lock to any other panel edge within 0.2 px:

js
Copy
Edit
// 1) Helper to snap a panel to its neighbors
function snapPosition(panelEl, proposedX, proposedY, threshold = 0.2) {
  const w = panelEl.offsetWidth;
  const h = panelEl.offsetHeight;

  // current edges of the moving panel
  let edges = {
    left:   proposedX,
    right:  proposedX + w,
    top:    proposedY,
    bottom: proposedY + h
  };

  document.querySelectorAll('.panel-item').forEach(otherEl => {
    if (otherEl === panelEl) return;       // skip itself

    const ox = otherEl.offsetLeft;
    const oy = otherEl.offsetTop;
    const ow = otherEl.offsetWidth;
    const oh = otherEl.offsetHeight;

    // edges of the stationary panel
    const other = {
      left:   ox,
      right:  ox + ow,
      top:    oy,
      bottom: oy + oh
    };

    // Horizontal snapping
    if (Math.abs(edges.left  - other.right) <= threshold) {
      proposedX = other.right;
      edges.left  = proposedX;
      edges.right = proposedX + w;
    } else if (Math.abs(edges.right - other.left) <= threshold) {
      proposedX = other.left - w;
      edges.left  = proposedX;
      edges.right = proposedX + w;
    }

    // Vertical snapping
    if (Math.abs(edges.top    - other.bottom) <= threshold) {
      proposedY = other.bottom;
      edges.top    = proposedY;
      edges.bottom = proposedY + h;
    } else if (Math.abs(edges.bottom - other.top) <= threshold) {
      proposedY = other.top - h;
      edges.top    = proposedY;
      edges.bottom = proposedY + h;
    }
  });

  return { x: proposedX, y: proposedY };
}
Then inside your drag‐move handler (where you do const newX = …; const newY = …;), replace your direct positioning with:

js
Copy
Edit
// before:
// panelEl.style.left = newX + 'px';
// panelEl.style.top  = newY + 'px';

// after snapping:
const { x: snapX, y: snapY } = snapPosition(panelEl, newX, newY, 0.2);
panelEl.style.left = snapX + 'px';
panelEl.style.top  = snapY + 'px';

// update your panel data too
panelData.x = snapX;
panelData.y = snapY;
What this does:

On every mouse‐move during a drag, it checks all other panels’ edges.

If any edge of your moving panel comes within 0.2 px of another panel’s edge, it automatically aligns them exactly.

Works for both horizontal and vertical edge‐to‐edge snapping.

Paste that helper and integration into your script right after your existing drag math, and panels will “click” together as you slide them near each other.