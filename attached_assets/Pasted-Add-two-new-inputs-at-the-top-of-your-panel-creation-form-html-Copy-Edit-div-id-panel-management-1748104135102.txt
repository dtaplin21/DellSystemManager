Add two new inputs at the top of your panel‐creation form:

html
Copy
Edit
<div id="panel‐management‐modal" class="modal">
  <div class="modal-content">
    <h2>Add New Panel</h2>

    <!-- New: Roll Number -->
    <div class="form-group">
      <label for="panel-roll">Roll Number</label>
      <input type="text" id="panel-roll" placeholder="e.g. R-102" required>
    </div>

    <!-- New: Panel Number -->
    <div class="form-group">
      <label for="panel-number">Panel Number</label>
      <input type="text" id="panel-number" placeholder="e.g. P-001" required>
    </div>

    <!-- Your existing shape‐specific controls go here… -->
    <div id="rectangle-controls" class="shape-controls">…</div>
    <div id="triangle-controls" class="shape-controls">…</div>
    <!-- etc. -->

    <button id="add‐panel" class="btn btn-primary">Add Panel</button>
  </div>
</div>
2) Read those values in your JS “Add Panel” handler
Before you build your panel object, grab the new inputs:

js
Copy
Edit
document.getElementById('add-panel').addEventListener('click', () => {
  const roll   = document.getElementById('panel-roll').value.trim();
  const number = document.getElementById('panel-number').value.trim();

  if (!roll || !number) {
    showToast('Missing Data', 'Please enter both roll number and panel number.');
    return;
  }

  // shape‐specific dims as before…
  let panel = {
    id: number,              // use your panel‐number as the unique ID
    rollNumber: roll,        // new field
    panelNumber: number,     // same as id, but explicit
    shape: currentShape,     // "rectangle", "triangle", etc.
    width, length, base, height, // as appropriate…
    x: 50 + panels.length * 20,
    y: 50 + panels.length * 15
  };

  panels.push(panel);
  updatePanelList();
  createVisualPanel(panel);
  showToast('Panel Added', `Roll ${roll}, Panel ${number} added.`);
});
3) Surface them in your visual panel
In the same createVisualPanel(panel):

js
Copy
Edit
function createVisualPanel(panel) {
  // …existing setup…

  // Build combined label text
  const label = document.createElement('span');
  label.className = 'panel-label';
  label.textContent = `${panel.rollNumber} • ${panel.panelNumber}`;

  // (rest of your centering / font‐size logic…)

  panelElement.appendChild(label);
  // …rotation handle, drag, snapping, etc…
}
4) Persist through your model/API
If you’re sending these panels back to your Python API, be sure to include rollNumber and panelNumber in your JSON payload:

js
Copy
Edit
fetch('/api/panel-layout/optimize', {
  method: 'POST',
  body: JSON.stringify({
    siteConfig,
    panels: panels.map(p => ({
      id: p.id,
      rollNumber: p.rollNumber,
      panelNumber: p.panelNumber,
      shape: p.shape,
      corners: p.corners,
      // …etc…
    })),
    strategy
  }),
  headers: { 'Content-Type': 'application/json' }
})
With those four tweaks you’ll have a fully optimized modal that forces the user to enter a roll number and panel number, stores them on each panel, and renders them neatly—no matter how you resize or rotate.







