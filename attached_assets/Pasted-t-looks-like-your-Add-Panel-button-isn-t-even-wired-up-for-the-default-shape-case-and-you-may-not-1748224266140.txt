t looks like your “Add Panel” button isn’t even wired up for the default‐shape case, and you may not have a proper reference to your panel container when you call createVisualPanel, so nothing ever gets added—and without a panelViewer reference, makePanelDraggable never hooks up, so dragging does nothing.

Here’s a minimal, end‐to‐end example you can drop into your existing script (after all your helper functions) that:

Hooks the Add Panel button

Keeps a global panels[] and panelCounter

Adds every new panel into the container

Immediately wires up drag & resize

js
Copy
Edit
// 1) Top‐level state & container
const panelViewer   = document.getElementById('panel-canvas');
const addPanelBtn   = document.getElementById('add-panel');    // your “Add Panel” button
let panels          = [];                                      // track panel data
let panelCounter    = 0;                                       // unique IDs

// 2) Wire the Add Panel click
addPanelBtn.addEventListener('click', () => {
  // read your inputs (roll, number, shape, dims…)
  const roll   = document.getElementById('panel-roll').value.trim();
  const number = document.getElementById('panel-number').value.trim();
  if (!roll || !number) {
    showToast('Missing Data', 'Enter both Roll Number and Panel Number');
    return;
  }
  // example defaults—swap in your own dim logic per shape
  const width  = parseFloat(document.getElementById('panel-width').value)  || 10;
  const length = parseFloat(document.getElementById('panel-length').value) || 10;
  const shape  = selectedShape || 'rectangle';

  // build the data object
  const panelData = {
    id:            number,
    rollNumber:    roll,
    panelNumber:   number,
    shape,
    width,
    length,
    x: 50, y: 50,     // starting offset
    rotation: 0
  };
  panels.push(panelData);

  // render it
  createVisualPanel(panelData);
});

// 3) Updated createVisualPanel to use the correct container var
function createVisualPanel(panel) {
  const panelEl = document.createElement('div');
  panelEl.className = 'panel-item';
  panelEl.id        = panel.id;
  panelEl.innerHTML = `
    <div class="panel-label">
      <div class="roll-text">${panel.rollNumber}</div>
      <div class="panel-text">${panel.panelNumber}</div>
    </div>
    <span class="panel-dimensions">${panel.width}ft × ${panel.length}ft</span>
  `;
  // sizing (use your PIXELS_PER_FOOT constant)
  const pw = panel.width  * PIXELS_PER_FOOT;
  const ph = panel.length * PIXELS_PER_FOOT;
  panelEl.style.left   = panel.x + 'px';
  panelEl.style.top    = panel.y + 'px';
  panelEl.style.width  = pw + 'px';
  panelEl.style.height = ph + 'px';
  panelEl.style.transformOrigin = 'center center';
  if (panel.rotation) panelEl.style.transform = `rotate(${panel.rotation}deg)`;

  // now wire interactions
  addResizeHandles(panelEl, panel);
  const rotateHandle = document.createElement('div');
  rotateHandle.className = 'rotate-handle';
  panelEl.appendChild(rotateHandle);
  addRotateLogic(rotateHandle, panelEl, panel);
  makePanelDraggable(panelEl, panel);

  panelViewer.appendChild(panelEl);
}

// 4) Sample makePanelDraggable (ensure it references panelViewer)
function makePanelDraggable(panelEl, panelData) {
  let dragging=false, startX, startY, offX, offY;
  panelEl.addEventListener('mousedown', e=>{
    if (e.target.matches('.resize-handle, .rotate-handle')) return;
    e.stopPropagation(); dragging=true;
    const rect = panelViewer.getBoundingClientRect();
    const zoom = parseFloat(panelViewer.style.transform.replace(/scale\((.+)\)/,'$1'))||1;
    const localX = (e.clientX-rect.left)/zoom;
    const localY = (e.clientY-rect.top)/zoom;
    offX = localX - panelData.x;
    offY = localY - panelData.y;
    document.body.style.cursor='move';
  });
  document.addEventListener('mousemove', e=>{
    if(!dragging) return;
    const rect = panelViewer.getBoundingClientRect();
    const zoom = parseFloat(panelViewer.style.transform.replace(/scale\((.+)\)/,'$1'))||1;
    const localX = (e.clientX-rect.left)/zoom;
    const localY = (e.clientY-rect.top)/zoom;
    const nx = localX-offX, ny = localY-offY;
    panelEl.style.left = nx+'px';
    panelEl.style.top  = ny+'px';
    panelData.x = nx; panelData.y = ny;
  });
  document.addEventListener('mouseup', ()=>{
    if(dragging){ dragging=false; document.body.style.cursor=''; }
  });
}
