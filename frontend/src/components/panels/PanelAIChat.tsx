'use client'

import { useState, useRef, useEffect } from 'react'
import { Button } from '@/components/ui/button'
import type { Panel } from '../../types/panel'

interface PanelAIChatProps {
  projectInfo: {
    projectName: string
    location: string
    description: string
    manager: string
    material: string
  }
  panels: Panel[]
  setPanels: React.Dispatch<React.SetStateAction<Panel[]>>
}

interface Message {
  role: 'user' | 'assistant'
  content: string
}

export default function PanelAIChat({ projectInfo, panels, setPanels }: PanelAIChatProps) {
  const [messages, setMessages] = useState<Message[]>([
    {
      role: 'assistant',
      content: 'Hello! I\'m your panel layout assistant. Ask me to help with your panel layout, such as "Place a new panel next to panel 1A" or "Combine panels 2 and 3".'
    }
  ])
  const [inputMessage, setInputMessage] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const chatContainerRef = useRef<HTMLDivElement>(null)

  useEffect(() => {
    // Scroll to bottom of chat when messages change
    if (chatContainerRef.current) {
      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight
    }
  }, [messages])

  const handleSendMessage = async () => {
    if (!inputMessage.trim()) return
    
    const userMessage = inputMessage.trim()
    setInputMessage('')
    
    // Add user message to chat
    setMessages(prev => [...prev, { role: 'user', content: userMessage }])
    
    // Show loading state
    setIsLoading(true)
    
    try {
      // In a real implementation, you would call your AI service here
      // For now, we'll simulate a response based on simple pattern matching
      
      // Prepare the context for the AI
      const context = {
        projectInfo,
        panels: panels.map(panel => ({
          id: panel.id,
          panelNumber: panel.panelNumber,
          height: panel.height,
          width: panel.width,
          location: panel.location,
          x: panel.x,
          y: panel.y
        }))
      }
      
      // Simulate API call delay
      await new Promise(resolve => setTimeout(resolve, 1500))
      
      let responseMessage = "I understand you want to modify the panel layout, but I need more specific instructions."
      let updatedPanels = [...panels]
      
      // Simple pattern matching for demo purposes
      // In a real implementation, this would be replaced with AI processing
      
      // Pattern: Create a new panel
      if (/create|add|new panel/i.test(userMessage)) {
        const color = generatePastelColor()
        const newPanel: Panel = {
          id: Date.now().toString(),
          date: new Date().toISOString().slice(0, 10),
          panelNumber: `P${panels.length + 1}`,
          isValid: true,
          height: 100, // height should match length for consistency
          width: 40,
          rollNumber: `R-${100 + panels.length + 1}`,
          location: 'Auto-generated by AI',
          x: 200 + (panels.length * 30) % 300,
          y: 200 + (panels.length * 30) % 200,
          shape: 'rectangle',
          rotation: 0,
          color,
          fill: color,
          meta: {
            repairs: [],
            airTest: { result: 'pending' }
          }
        }
        
        updatedPanels = [...panels, newPanel]
        setPanels(updatedPanels)
        
        responseMessage = `I've created a new panel with number ${newPanel.panelNumber} and placed it on the layout. You can drag it to adjust its position.`
      }
      
      // Pattern: Move a panel
      else if (/move|place|position|relocate/i.test(userMessage)) {
        const panelNumberMatch = userMessage.match(/panel\s+([a-zA-Z0-9-]+)/i)
        
        if (panelNumberMatch) {
          const targetPanelNumber = panelNumberMatch[1]
          const panelIndex = panels.findIndex(p => 
            (p.panelNumber || '').toLowerCase() === targetPanelNumber.toLowerCase()
          )
          
          if (panelIndex >= 0) {
            // Extract direction or coordinates if present
            let newX = panels[panelIndex].x
            let newY = panels[panelIndex].y
            
            if (/north|top/i.test(userMessage)) {
              newY = 50
            } else if (/south|bottom/i.test(userMessage)) {
              newY = 400
            } else if (/east|right/i.test(userMessage)) {
              newX = 400
            } else if (/west|left/i.test(userMessage)) {
              newX = 50
            } else if (/center/i.test(userMessage)) {
              newX = 200
              newY = 200
            }
            
            updatedPanels = panels.map((panel, i) => {
              if (i === panelIndex) {
                return { ...panel, x: newX, y: newY }
              }
              return panel
            })
            
            setPanels(updatedPanels)
            responseMessage = `I've moved panel ${targetPanelNumber} to the requested position.`
          } else {
            responseMessage = `I couldn't find panel ${targetPanelNumber}. Please check the panel number and try again.`
          }
        } else {
          responseMessage = "I need to know which panel to move. Please specify the panel number, e.g., 'Move panel 1A to the center'."
        }
      }
      
      // Pattern: Delete or remove a panel
      else if (/delete|remove/i.test(userMessage)) {
        const panelNumberMatch = userMessage.match(/panel\s+([a-zA-Z0-9-]+)/i)
        
        if (panelNumberMatch) {
          const targetPanelNumber = panelNumberMatch[1]
          const panelIndex = panels.findIndex(p => 
            (p.panelNumber || '').toLowerCase() === targetPanelNumber.toLowerCase()
          )
          
          if (panelIndex >= 0) {
            updatedPanels = panels.filter((_, i) => i !== panelIndex)
            setPanels(updatedPanels)
            responseMessage = `I've removed panel ${targetPanelNumber} from the layout.`
          } else {
            responseMessage = `I couldn't find panel ${targetPanelNumber}. Please check the panel number and try again.`
          }
        } else {
          responseMessage = "I need to know which panel to remove. Please specify the panel number, e.g., 'Remove panel 2A'."
        }
      }
      
      // Pattern: Resize a panel
      else if (/resize|adjust size|change size|make bigger|make smaller/i.test(userMessage)) {
        const panelNumberMatch = userMessage.match(/panel\s+([a-zA-Z0-9-]+)/i)
        
        if (panelNumberMatch) {
          const targetPanelNumber = panelNumberMatch[1]
          const panelIndex = panels.findIndex(p => 
            (p.panelNumber || '').toLowerCase() === targetPanelNumber.toLowerCase()
          )
          
          if (panelIndex >= 0) {
            let newHeight = panels[panelIndex].height
            let newWidth = panels[panelIndex].width
            
            // Check for size adjustments
            if (/larger|bigger|increase/i.test(userMessage)) {
              newHeight *= 1.2
              newWidth *= 1.2
            } else if (/smaller|reduce|decrease/i.test(userMessage)) {
              newHeight *= 0.8
              newWidth *= 0.8
            }
            
            // Check for specific dimensions
            const dimensionMatch = userMessage.match(/(\d+(\.\d+)?)\s*(?:ft|feet|')\s*[xX]\s*(\d+(\.\d+)?)\s*(?:ft|feet|')/i)
            if (dimensionMatch) {
              newHeight = parseFloat(dimensionMatch[1])
              newWidth = parseFloat(dimensionMatch[3])
            }
            
            updatedPanels = panels.map((panel, i) => {
              if (i === panelIndex) {
                return { ...panel, height: newHeight, width: newWidth }
              }
              return panel
            })
            
            setPanels(updatedPanels)
            responseMessage = `I've resized panel ${targetPanelNumber} to ${newHeight.toFixed(1)} ft x ${newWidth.toFixed(1)} ft.`
          } else {
            responseMessage = `I couldn't find panel ${targetPanelNumber}. Please check the panel number and try again.`
          }
        } else {
          responseMessage = "I need to know which panel to resize. Please specify the panel number, e.g., 'Resize panel 3A to 100 ft x 50 ft'."
        }
      }
      
      // Add more pattern matching as needed for other operations
      
      // Add AI response to chat
      setMessages(prev => [...prev, { role: 'assistant', content: responseMessage }])
    } catch (error) {
      console.error('Error processing AI request:', error)
      setMessages(prev => [...prev, { 
        role: 'assistant', 
        content: "I'm sorry, I encountered an error processing your request. Please try again."
      }])
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="flex flex-col h-80">
      <div 
        ref={chatContainerRef}
        className="flex-1 overflow-y-auto mb-4 p-2 border rounded bg-gray-50"
      >
        {messages.map((message, index) => (
          <div 
            key={index} 
            className={`mb-2 ${
              message.role === 'user' ? 'text-right' : 'text-left'
            }`}
          >
            <div 
              className={`inline-block rounded-lg px-3 py-2 max-w-[80%] ${
                message.role === 'user' 
                  ? 'bg-blue-500 text-white' 
                  : 'bg-gray-200 text-gray-800'
              }`}
            >
              {message.content}
            </div>
          </div>
        ))}
        {isLoading && (
          <div className="text-left mb-2">
            <div className="inline-block rounded-lg px-3 py-2 bg-gray-200 text-gray-800">
              <div className="flex space-x-1">
                <div className="w-2 h-2 bg-gray-500 rounded-full animate-bounce"></div>
                <div className="w-2 h-2 bg-gray-500 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                <div className="w-2 h-2 bg-gray-500 rounded-full animate-bounce" style={{ animationDelay: '0.4s' }}></div>
              </div>
            </div>
          </div>
        )}
      </div>
      
      <div className="flex">
        <input
          type="text"
          value={inputMessage}
          onChange={(e) => setInputMessage(e.target.value)}
          onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
          placeholder="Ask the AI assistant for help..."
          className="flex-1 p-2 border rounded-l"
          disabled={isLoading}
        />
        <Button
          onClick={handleSendMessage}
          disabled={isLoading || !inputMessage.trim()}
          className="rounded-l-none"
        >
          Send
        </Button>
      </div>
      
      <div className="mt-2 text-xs text-gray-500">
        Try: &quot;Create a new panel&quot;, &quot;Move panel P1 to the north&quot;, &quot;Resize panel P2 to 120 ft x 45 ft&quot;
      </div>
    </div>
  )
}

// Utility function to generate pastel colors
function generatePastelColor() {
  const hue = Math.floor(Math.random() * 360)
  return `hsl(${hue}, 70%, 80%)`
}