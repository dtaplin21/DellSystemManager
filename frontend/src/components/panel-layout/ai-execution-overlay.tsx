'use client';

import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { AILayoutAction } from '@/services/canvasActionExecutor';

interface AIExecutionOverlayProps {
  isVisible: boolean;
  isExecuting: boolean;
  actions: AILayoutAction[];
  progress: { current: number; total: number };
  onExecute: () => void;
  onCancel: () => void;
}

export default function AIExecutionOverlay({
  isVisible,
  isExecuting,
  actions,
  progress,
  onExecute,
  onCancel
}: AIExecutionOverlayProps) {
  const [currentAction, setCurrentAction] = useState<string>('');
  const [error, setError] = useState<string | null>(null);

  // Update current action description based on progress
  useEffect(() => {
    try {
      if (progress.current > 0 && progress.current <= actions.length) {
        const action = actions[progress.current - 1];
        if (action) {
          switch (action.type) {
            case 'CREATE_PANEL':
              setCurrentAction(`Creating panel ${progress.current}`);
              break;
            case 'MOVE_PANEL':
              setCurrentAction(`Moving panel ${progress.current}`);
              break;
            case 'DELETE_PANEL':
              setCurrentAction(`Deleting panel ${progress.current}`);
              break;
            default:
              setCurrentAction(`Executing ${action.type} ${progress.current}`);
          }
        }
      }
    } catch (err) {
      console.error('Error updating current action:', err);
      setError('Error updating action display');
    }
  }, [progress.current, actions]);

  // Don't render if not visible
  if (!isVisible) return null;

  // Handle errors gracefully
  if (error) {
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
          <div className="text-center">
            <h2 className="text-xl font-bold text-red-600 mb-4">Error</h2>
            <p className="text-gray-600 mb-4">{error}</p>
            <Button onClick={onCancel} className="w-full">
              Close
            </Button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
        <div className="text-center">
          {/* Simple AI Icon */}
          <div className="mb-4">
            <div className="w-12 h-12 bg-blue-500 rounded-full flex items-center justify-center mx-auto">
              <span className="text-white text-lg font-bold">AI</span>
            </div>
          </div>

          <h2 className="text-xl font-bold text-gray-900 mb-2">
            {isExecuting ? 'AI Executing Layout' : 'AI Layout Ready'}
          </h2>
          
          <p className="text-gray-600 mb-4">
            {isExecuting 
              ? 'The AI is creating your panel layout...'
              : `${actions.length} panel actions generated by AI`
            }
          </p>

          {/* Progress Section */}
          {isExecuting && (
            <div className="mb-4">
              <div className="flex items-center justify-center space-x-2 mb-3">
                <div className="w-4 h-4 border-2 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
                <span className="text-blue-600 font-medium text-sm">
                  {currentAction}
                </span>
              </div>
              
              {/* Progress Bar */}
              <div className="w-full bg-gray-200 rounded-full h-2 mb-2">
                <div 
                  className="bg-blue-500 h-2 rounded-full transition-all duration-500 ease-out"
                  style={{ width: `${(progress.current / progress.total) * 100}%` }}
                ></div>
              </div>
              
              <p className="text-sm text-gray-500">
                {progress.current} of {progress.total} actions completed
              </p>
            </div>
          )}

          {/* Action Buttons */}
          <div className="flex space-x-3">
            {!isExecuting && (
              <Button 
                onClick={onExecute}
                className="flex-1 bg-blue-600 hover:bg-blue-700 text-white"
              >
                Execute AI Layout
              </Button>
            )}
            
            <Button 
              variant="outline" 
              onClick={onCancel}
              className="flex-1"
              disabled={isExecuting}
            >
              {isExecuting ? 'Processing...' : 'Cancel'}
            </Button>
          </div>

          {/* Simple Loading Animation */}
          {isExecuting && (
            <div className="mt-4">
              <div className="flex justify-center space-x-1">
                <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce"></div>
                <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
              </div>
              <p className="text-xs text-gray-500 mt-2">AI is thinking...</p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
} 